name: Daily Content Update

on:
  schedule:
    # 毎日 JST 5:00 (UTC 20:00)
    - cron: '0 20 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Run in debug mode'
        required: false
        default: 'false'
      limit_articles:
        description: 'Limit number of articles to process'
        required: false
        default: '5'

permissions:
  contents: write    # リポジトリへの書き込み権限
  issues: write      # Issue作成権限  
  pages: write       # GitHub Pagesへのデプロイ権限
  id-token: write    # OIDC認証用

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  collect-and-process:
    runs-on: ubuntu-latest
    
    outputs:
      articles-generated: ${{ steps.check-output.outputs.articles-count }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data directory
      run: mkdir -p data
    
    - name: Collect articles
      env:
        PUBMED_API_KEY: ${{ secrets.PUBMED_API_KEY }}
      run: |
        python src/main_nosummary.py collect \
          --date $(date +%Y-%m-%d) \
          --limit ${{ github.event.inputs.limit_articles || '5' }} \
          --output data/collected_articles.json
    
    - name: Evaluate and format articles
      run: |
        python src/main_nosummary.py evaluate \
          --input data/collected_articles.json \
          --output data/summarized_articles.json \
          --threshold 70
    
    - name: Check output
      id: check-output
      run: |
        if [ -f "data/summarized_articles.json" ]; then
          ARTICLE_COUNT=$(python -c "import json; data=json.load(open('data/summarized_articles.json')); print(len(data.get('articles', [])))")
          echo "articles-count=$ARTICLE_COUNT" >> $GITHUB_OUTPUT
          echo "Generated $ARTICLE_COUNT articles"
        else
          echo "articles-count=0" >> $GITHUB_OUTPUT
          echo "No articles generated"
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: processed-articles
        path: data/
        retention-days: 7

  build-and-deploy:
    needs: collect-and-process
    runs-on: ubuntu-latest
    if: needs.collect-and-process.outputs.articles-generated > 0
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: processed-articles
        path: data/
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: site/package-lock.json
    
    - name: Install Node dependencies
      working-directory: ./site
      run: npm ci
    
    - name: Update site data
      run: |
        python src/main_nosummary.py update-site \
          --articles data/summarized_articles.json \
          --site-dir site/
    
    - name: Build site
      working-directory: ./site
      run: npm run build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site/dist
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: '🤖 Daily update: ${{ needs.collect-and-process.outputs.articles-generated }} articles'

  notify:
    needs: [collect-and-process, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ "${{ needs.collect-and-process.result }}" == "failure" ]] || \
           [[ "${{ needs.build-and-deploy.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Daily update failed!" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.collect-and-process.outputs.articles-generated }}" == "0" ]]; then
          echo "status=warning" >> $GITHUB_OUTPUT
          echo "message=No articles generated today" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Daily update completed successfully! Generated ${{ needs.collect-and-process.outputs.articles-generated }} articles" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Issue on Failure
      if: steps.check.outputs.status == 'failure'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Daily Update Failed - ' + new Date().toISOString().split('T')[0],
              body: `Daily content update failed on ${new Date().toISOString().split('T')[0]}.
            
**Job Results:**
- Collection & Processing: \${{ needs.collect-and-process.result }}
- Build & Deploy: \${{ needs.build-and-deploy.result }}

**Articles Generated:** \${{ needs.collect-and-process.outputs.articles-generated }}

Please check the [workflow run](\${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}) for details.`,
              labels: ['bug', 'automation']
            });
          } catch (error) {
            console.error('Failed to create issue:', error);
            // Don't fail the workflow if issue creation fails
          }
    
    - name: Comment on Success
      if: steps.check.outputs.status == 'success'
      run: |
        echo "✅ ${{ steps.check.outputs.message }}"